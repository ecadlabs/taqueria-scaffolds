// WARNING: This file is autogenerated and should NOT be modified
{
    "build": "d06f7b1",
    "configHash": "b29f0361af214faa3e43a5914e1c155a27f5d612537def23a50549b4e51ebbec",
    "tasks": {
        "compile": {
            "name": "@taqueria/plugin-ligo",
            "type": "npm"
        },
        "start sandbox": {
            "name": "@taqueria/plugin-flextesa",
            "type": "npm"
        },
        "stop sandbox": {
            "name": "@taqueria/plugin-flextesa",
            "type": "npm"
        },
        "list accounts": {
            "name": "@taqueria/plugin-flextesa",
            "type": "npm"
        },
        "typecheck": {
            "name": "@taqueria/plugin-tezos-client",
            "type": "npm"
        },
        "simulate": {
            "name": "@taqueria/plugin-tezos-client",
            "type": "npm"
        },
        "deploy": {
            "name": "@taqueria/plugin-taquito",
            "type": "npm"
        }
    },
    "operations": {},
    "plugins": [
        {
            "name": "@taqueria/plugin-ligo",
            "version": "0.1",
            "schema": "1.0",
            "alias": "ligo",
            "tasks": [
                {
                    "task": "compile",
                    "command": "compile [sourceFile]",
                    "aliases": [
                        "c",
                        "compile-ligo"
                    ],
                    "description": "Compile a smart contract written in a Ligo syntax to Michelson code",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "e",
                            "flag": "entrypoint",
                            "description": "The entry point that will be compiled"
                        },
                        {
                            "shortFlag": "s",
                            "flag": "syntax",
                            "description": "The syntax used in the contract"
                        },
                        {
                            "shortFlag": "i",
                            "flag": "infer",
                            "description": "Enable type inference"
                        }
                    ]
                }
            ],
            "operations": []
        },
        {
            "name": "@taqueria/plugin-flextesa",
            "version": "0.1",
            "schema": "1.0",
            "alias": "flextesa",
            "tasks": [
                {
                    "task": "start sandbox",
                    "command": "start sandbox [sandboxName]",
                    "aliases": [
                        "start flextesa"
                    ],
                    "description": "Starts a flextesa sandbox",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": [],
                    "positionals": [
                        {
                            "placeholder": "sandboxName",
                            "description": "The name of the sandbox to start"
                        }
                    ]
                },
                {
                    "task": "stop sandbox",
                    "command": "stop sandbox [sandboxName]",
                    "aliases": [
                        "stop flextesa"
                    ],
                    "description": "Stops a flextesa sandbox",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": [],
                    "positionals": [
                        {
                            "placeholder": "sandboxName",
                            "description": "The name of the sandbox to stop"
                        }
                    ]
                },
                {
                    "task": "list accounts",
                    "command": "list accounts <sandboxName>",
                    "aliases": [],
                    "description": "List the balances of all sandbox accounts",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [],
                    "positionals": [
                        {
                            "placeholder": "sandboxName",
                            "description": "The name of the sandbox to use"
                        }
                    ]
                }
            ],
            "operations": []
        },
        {
            "name": "@taqueria/plugin-tezos-client",
            "version": "0.1",
            "schema": "1.0",
            "alias": "tezos-client",
            "tasks": [
                {
                    "task": "typecheck",
                    "command": "typecheck [sourceFiles...]",
                    "aliases": [
                        "tc"
                    ],
                    "description": "Typecheck Michelson contracts",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "s",
                            "flag": "sandboxName",
                            "description": "The name of the sandbox to use",
                            "required": false
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "sourceFiles",
                            "description": "The names of the Michelson contracts you wish to typecheck, separated by space"
                        }
                    ]
                },
                {
                    "task": "simulate",
                    "command": "simulate <sourceFile> <input>",
                    "aliases": [
                        "sim"
                    ],
                    "description": "Run Michelson contracts as a simulation",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "storage",
                            "description": "The initial storage used to run the script. The value is a Michelson expression, wrapped in single quotes if specified in the CLI, wrapped in double quotes instead if specified in config.json",
                            "required": false
                        },
                        {
                            "shortFlag": "s",
                            "flag": "sandboxName",
                            "description": "The name of the sandbox to use",
                            "required": false
                        },
                        {
                            "flag": "entrypoint",
                            "description": "This makes contract invocation easier by specifying the annotation of an entrypoint (if it exists)",
                            "required": false
                        }
                    ],
                    "positionals": [
                        {
                            "placeholder": "sourceFile",
                            "description": "The name of the Michelson contract you wish to simulate"
                        },
                        {
                            "placeholder": "input",
                            "description": "The input used to run the script. The value is a Michelson expression wrapped in single quotes"
                        }
                    ]
                }
            ],
            "operations": []
        },
        {
            "name": "@taqueria/plugin-taquito",
            "version": "0.1",
            "schema": "1.0",
            "alias": "taquito",
            "tasks": [
                {
                    "task": "deploy",
                    "command": "deploy [contract]",
                    "aliases": [
                        "originate"
                    ],
                    "description": "Deploy a smart contract to a particular environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": []
                }
            ],
            "operations": []
        }
    ]
}